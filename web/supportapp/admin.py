# web/supportapp/admin.py

from django.contrib import admin, messages
from .models import MessageThread, Message, FAQ
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
import os
import logging

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
bot = Bot(token=TELEGRAM_TOKEN) if TELEGRAM_TOKEN else None

@admin.action(description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
def reply_to_user(modeladmin, request, queryset):
    for message in queryset:
        if message.sender == "admin" and bot:
            try:
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –î–æ–ø–æ–º–æ–≥–ª–æ", callback_data=f"helped:{message.thread.id}")],
                    [InlineKeyboardButton(text="‚ùå –ù–µ –¥–æ–ø–æ–º–æ–≥–ª–æ", callback_data=f"not_helped:{message.thread.id}")]
                ])
                bot.send_message(
                    chat_id=message.thread.user_id,
                    text=f"‚úâÔ∏è –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ–≤:\n\n{message.text}",
                    reply_markup=kb,
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"[Telegram Error] {e}")
                messages.error(request, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram: {e}")

class MessageInline(admin.TabularInline):
    model = Message
    extra = 0
    readonly_fields = ['sender', 'text', 'created_at']
    can_delete = False
    ordering = ['created_at']

class MessageThreadAdmin(admin.ModelAdmin):
    list_display = ['id', 'user_id', 'status', 'created_at', 'resolved']
    search_fields = ['user_id']
    list_filter = ['status', 'resolved']
    inlines = [MessageInline]
    change_form_template = "admin/supportapp/message_thread_change_form.html"
    actions = ["save_to_faq"]

    def response_change(self, request, obj):
        if "send_response" in request.POST:
            reply_text = request.POST.get("admin_reply", "").strip()
            if not reply_text:
                messages.error(request, "–ü–æ–ª–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø–æ—Ä–æ–∂–Ω—î.")
                return super().response_change(request, obj)

            Message.objects.create(
                thread=obj,
                sender="admin",
                text=reply_text
            )

            if bot:
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –î–æ–ø–æ–º–æ–≥–ª–æ", callback_data=f"helped:{obj.id}")],
                    [InlineKeyboardButton(text="‚ùå –ù–µ –¥–æ–ø–æ–º–æ–≥–ª–æ", callback_data=f"not_helped:{obj.id}")]
                ])
                try:
                    bot.send_message(
                        chat_id=obj.user_id,
                        text=f"‚úâÔ∏è –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ–≤:\n\n{reply_text}",
                        reply_markup=kb,
                        parse_mode="HTML"
                    )
                    messages.success(request, "–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")
                except Exception as e:
                    logger.error(f"[Telegram Error] {e}")
                    messages.error(request, f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤ Telegram: {e}")
            else:
                messages.warning(request, "Telegram –±–æ—Ç –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π.")

        elif "add_to_faq" in request.POST:
            try:
                question = Message.objects.filter(thread=obj, sender="user").order_by("created_at").first()
                answer = Message.objects.filter(thread=obj, sender="admin").order_by("-created_at").first()
                if question and answer:
                    FAQ.objects.create(question=question.text, answer=answer.text)
                    messages.success(request, "‚úÖ –î–æ–¥–∞–Ω–æ –¥–æ FAQ.")
                else:
                    messages.error(request, "–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–Ω–∞–π—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ FAQ", exc_info=True)
                messages.error(request, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤ FAQ: {e}")

        return super().response_change(request, obj)

    @admin.action(description="üìå –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ FAQ")
    def save_to_faq(self, request, queryset):
        for thread in queryset:
            question = Message.objects.filter(thread=thread, sender="user").order_by("created_at").first()
            answer = Message.objects.filter(thread=thread, sender="admin").order_by("-created_at").first()
            if question and answer:
                FAQ.objects.create(question=question.text, answer=answer.text)
                messages.success(request, f"–î–æ–¥–∞–Ω–æ –≤ FAQ: ¬´{question.text[:50]}...¬ª")
            else:
                messages.warning(request, f"–û–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è {thread.id} –Ω–µ –º–∞—î –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è FAQ.")

class MessageAdmin(admin.ModelAdmin):
    list_display = ['id', 'thread', 'sender', 'text', 'created_at']
    search_fields = ['text']
    list_filter = ['sender']
    readonly_fields = ['created_at']
    actions = [reply_to_user]

class FAQAdmin(admin.ModelAdmin):
    list_display = ['question', 'answer']
    search_fields = ['question', 'answer']

admin.site.register(FAQ, FAQAdmin)
admin.site.register(MessageThread, MessageThreadAdmin)
admin.site.register(Message, MessageAdmin)
