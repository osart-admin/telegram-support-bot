# web/supportapp/admin.py

from django.contrib import admin, messages
from .models import MessageThread, Message, FAQ
import os
import logging

logger = logging.getLogger(__name__)

@admin.action(description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
def reply_to_user(modeladmin, request, queryset):
    for message in queryset:
        if message.sender == "admin":
            messages.info(request, f"–û—Ç–≤–µ—Ç –¥–ª—è {message.thread.user_id} —É–∂–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.")

class MessageInline(admin.TabularInline):
    model = Message
    extra = 0
    readonly_fields = ['sender', 'text', 'created_at']
    can_delete = False
    ordering = ['created_at']

class MessageThreadAdmin(admin.ModelAdmin):
    list_display = ['id', 'user_id', 'status', 'created_at', 'resolved']
    search_fields = ['user_id']
    list_filter = ['status', 'resolved']
    inlines = [MessageInline]
    change_form_template = "admin/supportapp/message_thread_change_form.html"
    actions = ["save_to_faq"]

    def response_change(self, request, obj):
        if "send_response" in request.POST:
            reply_text = request.POST.get("admin_reply", "").strip()
            if not reply_text:
                messages.error(request, "–ü–æ–ª–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø–æ—Ä–æ–∂–Ω—î.")
                return super().response_change(request, obj)

            Message.objects.create(
                thread=obj,
                sender="admin",
                text=reply_text
            )

            messages.success(request, "–í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
        return super().response_change(request, obj)

    @admin.action(description="üìå –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ FAQ")
    def save_to_faq(self, request, queryset):
        for thread in queryset:
            question = Message.objects.filter(thread=thread, sender="user").order_by("created_at").first()
            answer = Message.objects.filter(thread=thread, sender="admin").order_by("-created_at").first()
            if question and answer:
                FAQ.objects.create(question=question.text, answer=answer.text)
                messages.success(request, f"–î–æ–¥–∞–Ω–æ –≤ FAQ: ¬´{question.text[:50]}...¬ª")
            else:
                messages.warning(request, f"–û–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è {thread.id} –Ω–µ –º–∞—î –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è FAQ.")

class MessageAdmin(admin.ModelAdmin):
    list_display = ['id', 'thread', 'sender', 'text', 'created_at']
    search_fields = ['text']
    list_filter = ['sender']
    readonly_fields = ['created_at']
    actions = [reply_to_user]

class FAQAdmin(admin.ModelAdmin):
    list_display = ['question', 'answer']
    search_fields = ['question', 'answer']

admin.site.register(FAQ, FAQAdmin)
admin.site.register(MessageThread, MessageThreadAdmin)
admin.site.register(Message, MessageAdmin)
